"""add profile and organization

Revision ID: 2615f2e2da9e
Revises: 54eeece17890
Create Date: 2025-09-07 18:54:26.004089

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2615f2e2da9e'
down_revision: Union[str, Sequence[str], None] = '54eeece17890'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('owner_user_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['owner_user_id'], ['public.profiles.user_id'], name='organizations_owner_user_id_fkey', ondelete='SET NULL', use_alter=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
        schema='public',
        info={'rls_policies': {'owner_controls_organization': {'command': 'ALL', 'using': 'owner_user_id = auth.uid()', 'check': 'owner_user_id = auth.uid()'}}}
    )
    op.execute('ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;\nCREATE POLICY owner_controls_organization ON public.organizations\n                AS PERMISSIVE\n                FOR ALL\n                USING (owner_user_id = auth.uid())\n                WITH CHECK (owner_user_id = auth.uid());')

    op.create_table('profiles',
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('onboarding_completed', sa.Boolean(), nullable=False),
        sa.Column('avatar_url', sa.String(), nullable=True),
        sa.Column('credits', sa.Integer(), nullable=False),
        sa.Column('is_approved', sa.Boolean(), nullable=False),
        sa.Column('waitlist_status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='waitliststatus'), nullable=False),
        sa.Column('waitlist_signup_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('cohort_id', sa.UUID(), nullable=True),
        sa.Column('organization_id', sa.UUID(), nullable=True),
        sa.Column('timezone', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['organization_id'], ['public.organizations.id'], name='profiles_organization_id_fkey', ondelete='SET NULL', use_alter=True),
        sa.PrimaryKeyConstraint('user_id'),
        schema='public',
        info={'rls_policies': {'user_owns_profile': {'command': 'ALL', 'using': 'user_id = auth.uid()', 'check': 'user_id = auth.uid()'}}}
    )
    op.execute('ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\nCREATE POLICY user_owns_profile ON public.profiles\n                AS PERMISSIVE\n                FOR ALL\n                USING (user_id = auth.uid())\n                WITH CHECK (user_id = auth.uid());')
    op.drop_table('stripe_products')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stripe_products',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('default_price', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('attrs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('stripe_products_pkey'))
    )
    op.execute('DROP POLICY IF EXISTS user_owns_profile ON public.profiles;')
    op.drop_table('profiles', schema='public')
    op.execute('DROP POLICY IF EXISTS owner_controls_organization ON public.organizations;')
    op.drop_table('organizations', schema='public')
    # ### end Alembic commands ###